// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  username      String?    @unique
  role          Role       @default(USER)
  points        Int        @default(0)
  likes         Likes[]
  startedTasks  UserTask[]
  solutions     Solution[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Task Model
model Task {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String   @db.Text
  image       String
  assets      String
  brief       String   @db.Text

  userTasks UserTask[]
  userId    String?
  solutions Solution[]

  @@index([userId])
}

// TaskStart Model
model UserTask {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  taskId      String?
  isStarted   Boolean  @default(true)
  isSubmitted Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])

  @@index([userId])
  @@index([taskId])
}

model Solution {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String   @db.Text
  githubLink   String
  liveSiteLink String
  description  String   @db.Text
  tags         String   @db.Text
  screenshot   String // You may choose an appropriate type for storing image data
  taskId       String
  points       Int?     @default(0)
  task         Task     @relation(fields: [taskId], references: [id])
  likes        Likes[]
  userId       String
  userTaskId   String?
  username     String?
  user         User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
}

model Likes {
  id         String @id @default(cuid())
  userId     String
  solutionId String

  user     User     @relation(fields: [userId], references: [id])
  solution Solution @relation(fields: [solutionId], references: [id])

  @@index([userId])
  @@index([solutionId])
}
